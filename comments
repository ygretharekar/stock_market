/*
	let info = symbols.map(
		symbol => {
			let data = arr.map(
				element => {
					if(symbols.length === 2){
						let some = element["aapl"];
						//console.log("some ", some[4]); 
						return some;
					} 
					else return element["msft"][4];
				}
			);
			return { [symbol]: data};
		}
	);
	console.log( "info ", info);
		
	let stockData = symbols.map(
		(sym, i) => {
			return(
				<LineSeries
					key={i}
					yAccessor={ 
						info[sym] 
					} 
					stroke={"#" + i*111 + 333}
					highlightOnHover
				/>
			);
		}
	); */



{/* <Chart
					id={0}
					yPan yExtents={[d => [d.high, d.low], ema20.accessor(), ema50.accessor()]}
				>

					<XAxis axisAt="bottom" orient="bottom" ticks={6}/>
					<MouseCoordinateX
						at="bottom"
						orient="bottom"
						displayFormat={timeFormat("%Y-%m-%d")} />
					<MouseCoordinateY
						at="right"
						orient="right"
						displayFormat={format(".2f")} />

					<Label x={(600) / 2} y={ 455}
						fontSize={12} text="Something" />

					<YAxis axisAt="left" orient="left" />


					{
						symbols.map(
							(sym, i) => {
								return(
									<div key={i}>
										<LineSeries
											yAccessor={d => d[sym][4]}
											stroke={"pink"}
											highlightOnHover
										/>
									</div>
								);
							}
						)
					}

					<HoverTooltip
						yAccessor={d => d.info[1]}
						tooltipContent={tooltipContent([
							{
								label: "FB",
								value: d => d.info[1],
								stroke: "red"
							}
						])}
						fontSize={15}
					/>
				</Chart> */
}

{/* {
					symbols.map(
						(s, i) => {
							return(
								<Chart
									key={i}
									id={i}
									yPan yExtents={d => d[s][4]}
								>
									<XAxis axisAt="bottom" orient="bottom" ticks={6}/>
									<MouseCoordinateX
										at="bottom"
										orient="bottom"
										displayFormat={timeFormat("%Y-%m-%d")} />
									<MouseCoordinateY
										at="right"
										orient="right"
										displayFormat={format(".2f")} />

									<Label x={(600) / 2} y={ 455}
										fontSize={12} text={ s } />

									<YAxis axisAt="left" orient="left" />

									<LineSeries
										yAccessor={d => d[s][4]}
										stroke={"#" + i*111 + 333}
										highlightOnHover
									/>
								</Chart>
							);
						}
					)
				} */

/* let array = data[0] ? data[0]: [];

	console.log("====================================");
	console.log( array );
	console.log("====================================");
	*/


/* let stockData = props.stocks.stocks.map(
		s => {
			console.log("====================================");
			console.log(s);
			console.log("====================================");
		}
	); */



/* let data = props.stocks.stocks[0].dataset_data.data.map(element => {
	console.log("====================================");
	console.log((new Date(element[0])).toDateString());
	console.log("===================================="); 

	return { date: new Date(element[0]).getTime(), info: element };
}); */


{/* <Chart id={0} yExtents={d => d.info[1]}>
	<XAxis axisAt="bottom" orient="bottom" ticks={10}/>
	<MouseCoordinateX
		at="bottom"
		orient="bottom"
		displayFormat={timeFormat("%Y-%m-%d")} />
	<MouseCoordinateY
		at="right"
		orient="right"
		displayFormat={format(".2f")} />

	<Label x={(600) / 2} y={ 455}
		fontSize={12} text="XAxis Label here" />

	<YAxis axisAt="left" orient="left" />
	<AreaSeries yAccessor={ d => d.info[1]}/>

	<HoverTooltip
		yAccessor={ema50.accessor()}
		tooltipContent={tooltipContent([
			{
				label: "MSFT",
				value: d => d.info[1],
				stroke: ema20.stroke()
			}
		])}
		fontSize={15}
</Chart> */}

{/* <Chart id={1} yExtents={d => d.info[4]}>
	<XAxis axisAt="bottom" orient="bottom" ticks={10}/>
	<MouseCoordinateX
		at="bottom"
		orient="bottom"
		displayFormat={timeFormat("%Y-%m-%d")} />
	<MouseCoordinateY
		at="right"
		orient="right"
		displayFormat={format(".2f")} />

	<Label x={(600) / 2} y={ 455}
		fontSize={12} text="XAxis Label here" />

	<YAxis axisAt="left" orient="left" />

	<LineSeries yAccessor={ d => d.info[4]} stroke={ema20.stroke()} highlightOnHover />
	

	<HoverTooltip
		yAccessor={ema50.accessor()}
		tooltipContent={tooltipContent([
			{
				label: "MSFT",
				value: d => d.info[1],
				stroke: ema20.stroke()
			}
		])}
		fontSize={15}
	/>


</Chart> */}

// s => {
// 				{/* console.log(JSON.stringify(s["Time Series (1min)"])); */
// 				}

// 				let arr = [];

// 				for (let obj in s["Time Series (1min)"]) {
// 								/* console.log( obj.slice(11), " : ", JSON.stringify(s["Time Series (1min)"][obj]) );

// 				console.log("====================================");
// 				console.log(
// 					(
// 						new
// 						Date(
// 							0,
// 							0,
// 							0,
// 							parseInt(obj.slice(11, 13)),
// 							parseInt(obj.slice(14, 16))
// 						)
// 					)
// 						.getTime()
// 						.toString()
// 				);
// 				console.log("===================================="); */

// 								let date = (new Date(0, 0, 0, parseInt(obj.slice(11, 13)), parseInt(obj.slice(14, 16)))).getTime();

// 								let close = s["Time Series (1min)"][obj]["4. close"];

// 								arr = [
// 												...arr, {
// 																date,
// 																close
// 												}
// 								];

// 				}

// 				arr.sort((a, b) => a > b
// 								? -1
// 								: a < b
// 												? 1
// 												: 0);

// 				return arr}